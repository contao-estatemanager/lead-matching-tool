<div class="ce_form block">
    <form action="<?=$this->action?>" method="post" enctype="application/x-www-form-urlencoded">
        <div class="formbody">
            <input type="hidden" name="FORM_SUBMIT" value="<?=$this->formId?>">
            <input type="hidden" name="REQUEST_TOKEN" value="{{request_token}}">
            <?=$this->fields?>
            <div class="widget widget-submit">
                <button type="submit" class="submit"><?=$this->submit?></button>
            </div>
        </div>
    </form>
</div>

<?php
    if($this->regionsAutocomplete):
        $GLOBALS['TL_JAVASCRIPT'][] = 'bundles/estatemanagerleadmatchingtool/autocomplete-adapter/autocomplete-adapter.js|static';
?>
    <script>
        var inputTimeput = {};

        document.addEventListener("DOMContentLoaded", function() {
            var regionAutocomplete = new AutocompleteAdapter('ctrl_<?=$this->regionsAutocompleteId?>', {
                formFields: ["latitude","longitude"],
                onSearch: function(data){
                    // clear previous items
                    regionAutocomplete.searchbox('clear');
                    regionAutocomplete.loader('show');

                    // prevent overshoot qurey limit
                    clearTimeout(inputTimeput);
                    inputTimeput = setTimeout(function(){ createItems(data.param.search); }, 1000);
                }
            });

            function createItems(search){
                var geocoder = new google.maps.Geocoder;
                var autocomplete = new google.maps.places.AutocompleteService();

                autocomplete.getPlacePredictions({ types: ['(regions)'], input: search }, function(predictions, status){
                    var places = [];

                    predictions.forEach(function(prediction) {
                        var prom = new Promise(function(resolve){
                            geocoder.geocode({
                                placeId: prediction.place_id
                            }, function(response, status){
                                resolve({
                                    autocomplete: prediction,
                                    geocode: response
                                });
                            });
                        });

                        places.push(prom);
                    });

                    Promise.all(places).then(function(items){
                        // create items
                        items.forEach(function(data) {
                            var objItem = {
                                title: data.autocomplete.description
                            };

                            if(data.geocode !== null)
                            {
                                objItem['latitude'] = data.geocode[0].geometry.location.lat();
                                objItem['longitude'] = data.geocode[0].geometry.location.lng();
                            }

                            regionAutocomplete.createItem(objItem);
                        });

                        regionAutocomplete.loader('hide');
                        regionAutocomplete.searchbox('show');
                    });
                });
            }
        });
    </script>
<?php endif; ?>
